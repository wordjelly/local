<%= form_for @status do |f| %>
	
	<!-- this will come from a drop down ? -->
	<!-- what if a status is applicable to multiple parents -->
	<!-- that will be a better way to do things -->
	<!-- for eg: on conveyor belt is applicable to practically everything under the sun-->
	<!-- so we can autocomplete on a field called parents -->
	<!-- or we can do it reverse -->
	<!-- on the report we add statuses to it -->
	<!-- so parent is inferred on status -->
	<div class="card">
		<div class="card-content">
			<div class="card-title">Status Details</div>
			<%= f.text_field :name, :data => {:autocomplete_type => "statuses"}, :autocomplete => "off" %>
			<%= f.label :name %>

			<%= f.number_field :priority %>
			<%= f.label :priority %>

			<div class="section">
				<p>
			      <label>
			        <input type="checkbox" name="status[requires_image]"/>
			        <span>Image must be uploaded with this status</span>
			      </label>
			    </p>
			</div>

			<% @status.information_keys.each do |ikey| %>

				<input type="text" name="status[info][<%= ikey %>]" val="<%= @status.information_keys[ikey] %>" />

			<% end %>
		</div>
	</div>

	<% unless @status.new_record? %>
	    <%= render :partial => "images/image", locals: {model: @status} %>
	<% end %>


	<div class="card">
		<div class="card-content">
			<div class="card-title">
				Related Object details
			</div>
		
			<%= f.text_field :report_id, disabled: true %>
			<%= f.label :report_id %>

			<%= f.text_field :item_id, disabled: true %>
			<%= f.label :item_id %>

			<%= f.text_field :item_group_id, disabled: true %>
			<%= f.label :item_group_id %>

			<%= f.text_field :order_id, disabled: true %>
			<%= f.label :order_id %>

			<%= f.text_field :patient_id, disabled: true %>
			<%= f.label :patient_id %>
		</div>
	</div>
	
	<%= f.submit "Submit", :class => "waves-effect waves-light btn" %>

<% end %>