29/4/2019:
1. date of birth selection UI not working with profiles_edit.
2. adding organization id , and verified as true for the creator of the organization itself.
3. add views and controller for packages, with versioning.
4. you can only add an item to a transaction if that transaction is showing that some items were received.
5. you cannot add an item to it, if items exceeding the received amount have already been registered on it.
6. index call does not query for public items if there is a current user.
7. vulnerability in the omniauth-ruby gem / what to do about this ? post/get request ?

PART A
7. add item requirements -> autocomplete inside the autogenerated form partial.
8. collate item requirements for multiple reports -> add or remove reports and update the item requirements.
9. assign local item group -> to bunch of reports.
10. verify a report -> (multiple verifications, direct data entry.)
11. handling inputs from outsourced reports, and the flow of smaple entry at the outsourcing points.
12. generate a report pdf.
13. handling interoperability between consultant, patient and lab for report visitibilty. connection patient and user.

## so the item requirements are added as an array
## requirements is an array of categories.
## finally the resolution is done at the level of the requirement.
## so inside requirement we nest
## {
	category : 
	item_id :
	item_group :
	whatever.
} 


PART B :
1. collation of statuses 
2. scheduling of statuses and routines, cancellation, postponement, and linking inventory to routines inside statuses.

PART C :
1. inventory updates by means of actions, and disposal and recycling of inventory items.
2. 


# so first change the architecture of test to ensure that it needs to be have the normal range ids added to it directly.
# for that give a search box.
# for name id -> ensure organization 

create reports,
make tests,
make normal ranges, } 1 hour (by 1 pm.)
## so now comes the versioned concern.
## 

make packages, } 1 hour (by 3 pm) - done, 

in the report -> a nested object for rates for each organization that can be customized.

what is next?
--- organization -> enforce the presence of some roles
--- user joining organization -> enforce it to have a role
--- versioned concern, ensure that verification is by the required number of users of those roles
--- tests, reports, normal_ranges

clone/customize reporst/tests/ranges } 1 hour (by 2 pm.)

reports :
-- image,
-- nested object for customization of rates.
-- sit in doctors rooms.


require an image to be compulsory for a report, } 15 mins

generate a pdf of an individual report, 
generate a pdf of a given group of reports, 
generate a pdf of abnormal findings, 
with final letterhead and formatting of the issuing organization, making sure everything looks good.
=> 1.5 hours } 5 pm.

generate a chart of the report values over time } 1 hour : 6 pm.

finalize how to enter values of a report manually, 

have a doctor's signature for the report, 
or more than one, 

cross checking values module for report entry/with challenges about patient information.

item groups, items , item_requirements, status definition.

-- imagine a utopian system where i finish all this in one day --
and from tomorrow how to only deal with bookings and schedules part.

----------------------------------------------------------------

1. transfers can be done for any transaction or item, or item group by any party.
2. a party from another organization cannot transfer from the primary organization to himself.
3. item is utilized when assigned to a patient, or marked as utilized.
4. item has to be detached from an existing item group before being reattached to another item group.
5. CRUD pages for comment, item_type, item_transfer and transaction, let me start with controllers for these also, at this stage.
6. basic def to calculate depleted stock.
7. how to deal with combi kits (how to barcode individual items?)
8. generating a written code for transaction items, so that we don't have to stick barcodes on them, or can we ?
9. how to solve date of opening of bottles (item modification)
10. automatic setting of routines to check stocks of items assigned to individual members/persons, should be able to sort this in one day.

----------------------------------------------------------------
pre populated tag types:

1. do we have kits ?
2. that should come from item groups.
3. so there we autocomplete on item groups.

-----

Steps to give users multiple organizations:
-------------------------------------------

1. update form : done
2. update organization to consider the members, while opting for the verified or rejected : doing.
3. if member organization is deleted, it should be removed from the list of verified users in the parent organization.
4. add organization header, and relevant organization selection to the base_controller_concern.
5. add functionality to become a member of a higher organization
6. add functionality for cascading.
7. after all this is done, we move forwards.

-- let me get all thsi out of theay

this will take till night. 
then we move to report test normal range.
or i can do that first also.
upto me.



## so order -> package/report -> add/remove later -> assign tubes -> schedule -> report format -> notify
## payment seperate 
## routine we go for, from monday onwards
## add a test -> figure out applicable range, decide who can edit
## make a report -> for the originating organization, give the organization editing options -> using the letter head.
## LIS controller -> interfacing.
## then whatever is left in the scheduling 

## all this minimum 3 weeks -> so basically month end.
## thereafter app in 1 month more.

##  i would like to do signatures and payments, and report inference generation.
## after that, we move to checking why the tubes are getting fucked.

##-------------------------------------------------------------------
## add dropdowns for result types etc.
## USE TICK MARKS FOR ALL THINGS WHICH ARE 1,-1, AS IT IS EASIER TO UNDERSTAND, AND USE.
## SORT OUT SHOWING NESTED ENTITIES, OR MAKE CUSTOM VIEWS.
## MASK BARCODE WHILE ADDING REQUIREMENT WHILE MAKING A REPORT TEMPLATE
## ADD AUTOCOMPLETE FOR CATEGORY NAMES WHILE ADDING A CATEGORY IN REPORT TEMPLATE
## TEST MUST HAVE VALUE IS NOT YET INCORPORATED IN ALL_TESTS_VERIFIED FUNCTION OF REPORT
## ONLY REPORT IF ABNORMAL, AND MUST HAVE VALUE MAY CLASH.
## KNOCK OF PDF URLS, FROM ALL FORMS.
## MODIFY MONGOID-ELASTICSEARCH GEM TO CHANGE THE index.rb file to remove blanked mapping type as document.
## TODAY'S TARGETS ----------------->
## LIS integration.
## ENDS -------------------->
## PAYMENTS MODULE/RECEIPTS/INVOICES/PAYUMONEY INTEGRATION.
## then we add emails, and configure mailgun.
## lis_code has to be unique across tests.
## payments - module is remaining, make option for prepaid payments.
## time incorporation for fasting and pp.
## rates with packages, and lab rates -> easy to directly add discount for a particular lab on all rates.
## payment invoice generation, live tracking.
## range based on weeks since gestation (different criteria)
## lmp option for patient.
## testing category and tube generation for multiple reports.
##-------------------------------------------------------------------

## TODAY BASIC TESTING OF REPORT GENERATION.
## IN DIFFERENT SETTINGS AND FROM DIFFERENT ORGANIZATIONS
## THIS WILL GET QUITE A BIG THING OUT OF THE WAY
## AND TUBE MAPPING -> WHY THIS IS NOT WORKING.

---------------------------------------------------------------------
## number search should work => i can add the first word of the indicator logic ? and commonest one, not all the things for autocomplete.
## t-test logic in subindicator_calculation
## weightage for score + epoch + search terms detected.
## remove dot's
## remove underscores, capitalize aroon
## add symbols for arrows.
## add indicator performance over the years - chart -> how to do this without too much data expansion.
## score weightage in the FST index should match the thing otherwise.

--------------------------------------------------------
## use same scoring for fst and complex derivations
## score should not override the other thing.
## but before that manage t-test.
--------------------------------------------------------------------
## this much is left ----------->
## okay so get this shit working.
## and then the options on organization to gather and generate bills.
## in the form of a cron also.
## and checking prepaid balance + online payment from payumoney.
## prepaid and postpaid are both orders, and we have to give them an option to choose how much to pay.
## then there are packages -> these include groups of reports.
## patient organization(automatic creation)
## but we cannot have recurring pacakges ->
## like three orders of lipid, liver, kidney ->
## how does that work ?
## while calculating pending payment, it can be for certain report ids?
## 
## ability for an organization to clear pending payments -> somehow make a payment.(this can also be an order, where the rate of the report is changed to the pending amount at the time of order creation -> and that is then paid via online.)
## after this is done, we will only be left with notifications.
## which is pretty simple.
## generating the receipts and bills for all the organizations.
## showing statement for individual organization
## and getting that as a pdf.
## pre-paid payments
## packages
## rates api.
## notifications and basic status integration.
## this is all going to take another month.
## so what is the pressure ?
## can it be done in a month ?
------- this whole payments thing with tests will take 1 week.
------- this whole notifications will take another week, together with UI improvements and tests to ensure shit is not being modified by other people.
------- next two weeks in status finalization.
------- so in one month, my work is mostly done.
earliest possible date to begin deployment -
so in this one month, we focus on getting organization join, creation of reports, tests, rates
-- copying a simple report, 
-- creating packages.
-- integration of the payumoney.
-- AI for nails.
-- in this one month, get a working endpoint -> to send a nail, and get back a classification.
-- the animations and questionnaires.

## lab adding patient on behalf of doctor
## lab adding patient and maintaining record of points.
## sending link to download app to doctor.
## all this can be organized.
## views for this -> 2 days.
## integration with cron -> 2 days
## payumoney -> 2 days.
## prepaid and postpaid checks -> 3 days
## notifications of report -> 3 days.
## so by month end we have the whole chain except status.
## After that its testing and one month of deployment.
## from manpreet get report format, orde

## packages and rates api.
## order photos for physicians.s
## signature.